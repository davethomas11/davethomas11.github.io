{"version":3,"sources":["game/v-is-for-vince.ts"],"names":["game_1","require","player_config_1","player_1","keyboard_input_1","basic_keyboard_movement_1","physics_module_1","VinceGame","_super","canvas","_this","this","call","VEL","ACCEL","DECEL","window","addEventListener","setBounds","init","__extends","prototype","getUniqueGameName","gameEdges","width","PhysicsConversions","toMetres","innerWidth","height","innerHeight","topLeft","PhysicsType2d","Vector2","topRight","bottomLeft","bottomRight","push","createEdge","edges","forEach","e","destroyPhysicBody","from","to","groundDefinition","Dynamics","BodyDefinition","type","BodyType","STATIC","ground","createPhysicsBody","groundShape","Collision","Shapes","EdgeShape","Set","CreateFixture","keyboard","default","addInput","vinceKeys","Keyset","config","colorA","colorB","fireKey","radius","startX","startY","vince","preparePlayer","jerryKeys","jerry","bartKeys","bart","keyset","acceleration","deceleration","speed","movementKeys","start","showFrameRate","add","stop","removeAllGameObjects","Object","defineProperty","exports","value"],"mappings":"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","file":"v-is-for-vince.js","sourcesContent":["'use strict';\n\nimport Game from '../engine/game';\nimport PlayerConfig from './models/player-config';\nimport Player from './models/player';\nimport KeyboardController from '../engine/input-controllers/keyboard-input';\nimport VelocityModule from '../engine/modules/velocity-module';\nimport GameObject from '../engine/models/game-object';\nimport { Keyset } from '../engine/input-controllers/basic-keyboard-movement';\nimport { PhysicsConversions } from '../engine/modules/physics-module';\n\nexport default class VinceGame extends Game {\n\n  readonly VEL: number = 250;\n  readonly ACCEL: number = 145;\n  readonly DECEL: number = 75;\n\n  vince: Player;\n  jerry: Player;\n  bart: Player;\n\n  keyboard: KeyboardController;\n\n  edges: Array<PhysicsType2d.Dynamics.Body>\n\n  constructor(canvas: HTMLCanvasElement) {\n    super(canvas);\n\n    // This allows us to have a full width game\n    window.addEventListener('resize', () => {\n      this.setBounds();\n    }, false);\n\n    this.init();\n  }\n\n  getUniqueGameName(): string {\n    return \"VisForVince\";\n  }\n \n  /**\n   * Sets the outer bounding box of the game to the window size\n   * Creates physics boundaries around outer edges of window\n   * \n   * @memberOf VinceGame\n   */\n  setBounds() {\n    let gameEdges:Array<PhysicsType2d.Dynamics.Body> = [];\n\n    let width = PhysicsConversions.toMetres(window.innerWidth);\n    let height = PhysicsConversions.toMetres(window.innerHeight);\n    let topLeft = new PhysicsType2d.Vector2(0, 0);\n    let topRight = new PhysicsType2d.Vector2(width, 0);\n    let bottomLeft = new PhysicsType2d.Vector2(0, height);\n    let bottomRight = new PhysicsType2d.Vector2(width, height);\n\n    gameEdges.push(this.createEdge(topLeft, topRight));\n    gameEdges.push(this.createEdge(topRight, bottomRight));\n    gameEdges.push(this.createEdge(bottomRight, bottomLeft));\n    gameEdges.push(this.createEdge(bottomLeft, topLeft));\n\n    if (this.edges) this.edges.forEach(e => this.destroyPhysicBody(e));\n    this.edges = gameEdges;\n\n    super.setBounds(window.innerWidth, window.innerHeight);\n  }\n\n  /**\n   * Create a physics edge object in the world.\n   * The edge blocks other physics objects from passing through it.\n   * \n   * @param {PhysicsType2d.Vector2} from - this point\n   * @param {PhysicsType2d.Vector2} to - this point\n   * @returns {PhysicsType2d.Dynamics.Body}\n   * \n   * @memberOf VinceGame\n   */\n  createEdge(from: PhysicsType2d.Vector2, to: PhysicsType2d.Vector2): PhysicsType2d.Dynamics.Body {\n    var groundDefinition = new PhysicsType2d.Dynamics.BodyDefinition();\n    groundDefinition.type = PhysicsType2d.Dynamics.BodyType.STATIC;\n    var ground = this.createPhysicsBody(groundDefinition);\n    var groundShape = new PhysicsType2d.Collision.Shapes.EdgeShape();\n    groundShape.Set(from, to);\n    ground.CreateFixture(groundShape, 0.0);\n    return ground;\n  }\n\n  init(): void {\n    this.keyboard = new KeyboardController;\n    super.addInput(this.keyboard); // Refactor this. Maybe it doesn't need to be attached to base game engine\n\n    let vinceKeys = new Keyset(\"ArrowLeft\", \"ArrowUp\", \"ArrowRight\", \"ArrowDown\");\n    let config = new PlayerConfig();\n    config.colorA = \"#0F0\";\n    config.colorB = \"#30F\"\n    config.fireKey = \"Enter\";\n    config.radius = 50;\n    config.startX = 100;\n    config.startY = 100;\n    this.vince = this.preparePlayer(config, vinceKeys);\n\n    let jerryKeys = new Keyset(\"KeyA\", \"KeyW\", \"KeyD\", \"KeyS\");\n    config.colorA = \"#F0F\";\n    config.colorB = \"#3AF\"\n    config.fireKey = \"Space\";\n    config.radius = 75;\n    config.startX = 300;\n    config.startY = 300;\n    this.jerry = this.preparePlayer(config, jerryKeys);\n\n    let bartKeys = new Keyset(\"KeyJ\", \"KeyI\", \"KeyL\", \"KeyK\");\n    config.colorA = \"#34F\";\n    config.colorB = \"#3A1\"\n    config.fireKey = \"KeyO\";\n    config.radius = 30;\n    config.startX = 100;\n    config.startY = 400;\n    this.bart = this.preparePlayer(config, bartKeys);\n\n  }\n\n  //temporary utility function\n  preparePlayer(config: PlayerConfig, keyset: Keyset): Player {\n    config.acceleration = this.ACCEL;\n    config.deceleration = this.DECEL;\n    config.speed = this.VEL;\n    config.movementKeys = keyset;\n\n    return new Player(config);\n  }\n\n  start() {\n    super.start();\n\n    this.showFrameRate(true);\n    this.setBounds();\n    \n    this.add(this.vince);\n    this.add(this.jerry);\n    this.add(this.bart);\n  }\n\n  stop() {\n    super.stop();\n\n    this.removeAllGameObjects();\n  }\n}\n"]}