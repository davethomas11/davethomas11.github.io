{"version":3,"sources":["game/models/player.ts"],"names":["game_object_1","require","laser_module_1","velocity_module_1","physics_module_1","basic_keyboard_movement_1","keyboard_input_1","hitpoint_module_1","Player","_super","config","call","this","LASER_ACCEL","LASER_SPEED","HP_MAX","x","startX","y","startY","radius","colorA","colorB","hpModule","default","addModule","fireKey","PhysicsModule","velocityModule","speed","acceleration","deceleration","keyboardMapping","BasicKeyboardMovementMapping","movementKeys","__extends","prototype","attach","context","keyboard","getInputController","undefined","attachKeyboardMapping","detach","removeKeyboardMapping","render","ctx","strokeStyle","lineWidth","fillStyle","beginPath","arc","Math","PI","fill","stroke","closePath","cos","angle","sin","hpBarTop","hpWidth","points","maxPoints","fillRect","getBodyDefinition","bodyDef","PhysicsType2d","Dynamics","BodyDefinition","type","BodyType","DYNAMIC","PhysicsConversions","toMetres","position","Vector2","linearDamping","getFixtures","fd","FixtureDefinition","shape","Collision","Shapes","CircleShape","r","m_radius","density","Object","defineProperty","exports","value"],"mappings":"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","file":"player.js","sourcesContent":["'use strict';\n\nimport GameObject from '../../engine/models/game-object';\nimport NumberTools from '../../engine/util/number-tools';\nimport LaserGunModule from '../modules/laser-module';\nimport VelocityModule from '../../engine/modules/velocity-module';\nimport { PhysicsModule, PhysicsConversions, BodyDefinitionFactory } from '../../engine/modules/physics-module';\nimport { BasicKeyboardMovementMapping, Keyset } from '../../engine/input-controllers/basic-keyboard-movement';\nimport KeyboardController from '../../engine/input-controllers/keyboard-input';\nimport PlayerConfig from './player-config';\nimport GameContext from '../../engine/models/game-context';\nimport HitPointModule from '../modules/hitpoint-module';\n\nexport default class Player extends GameObject implements BodyDefinitionFactory {\n \n  readonly LASER_ACCEL = 5000;\n  readonly LASER_SPEED = 750;\n  readonly HP_MAX = 50;\n\n  private velocityModule: VelocityModule;\n  private hpModule: HitPointModule;\n\n  private radius: number;\n  private colorA: string;\n  private colorB: string;\n  readonly keyboardMapping: BasicKeyboardMovementMapping;\n\n  constructor(config: PlayerConfig) {\n    super();\n\n    this.x = config.startX;\n    this.y = config.startY;\n\n    this.radius = config.radius;\n    this.colorA = config.colorA;\n    this.colorB = config.colorB;\n\n    this.hpModule = new HitPointModule(this.HP_MAX);\n    this.addModule(this.hpModule);\n    this.addModule(new LaserGunModule(config.fireKey, this.LASER_ACCEL, this.LASER_SPEED));\n    this.addModule(new PhysicsModule(this));\n    this.velocityModule = new VelocityModule(config.speed, config.acceleration, config.deceleration);\n    this.addModule(this.velocityModule);\n    this.keyboardMapping = new BasicKeyboardMovementMapping(this.velocityModule, config.movementKeys);\n  }\n\n  attach(context: GameContext): void {\n    super.attach(context);\n    let keyboard = context.getInputController(KeyboardController);\n    if (keyboard != undefined) {\n      (keyboard as KeyboardController).attachKeyboardMapping(this.keyboardMapping);\n    }\n  }\n\n  detach(context: GameContext): void {\n    super.detach(context);\n    let keyboard = context.getInputController(KeyboardController);\n    if (keyboard != undefined) {\n      (keyboard as KeyboardController).removeKeyboardMapping(this.keyboardMapping);\n    }\n  }\n\n  render(ctx: CanvasRenderingContext2D) {\n  \n    ctx.strokeStyle = \"#000\";\n    ctx.lineWidth = 4;\n    ctx.fillStyle = this.colorA;\n\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n\n    ctx.beginPath();\n    let x = this.x + 15 * Math.cos(this.velocityModule.angle);\n    let y = this.y + 15 * Math.sin(this.velocityModule.angle);\n    ctx.fillStyle = this.colorB;\n    ctx.lineWidth = 2;\n    ctx.arc(x, y, this.radius / 2, 0, 2 * Math.PI);\n\n    ctx.stroke();\n    ctx.fill();\n    ctx.closePath();\n\n    let hpBarTop = this.y - this.radius - 20;\n    let hpBarBottom = hpBarTop + 10;\n    let hpWidth = this.radius * 2 * (this.hpModule.points / this.hpModule.maxPoints);\n    ctx.fillRect(this.x - this.radius, hpBarTop, hpWidth, 10);\n  }\n\n  getBodyDefinition(): PhysicsType2d.Dynamics.BodyDefinition {\n    let bodyDef = new PhysicsType2d.Dynamics.BodyDefinition();\n    bodyDef.type = PhysicsType2d.Dynamics.BodyType.DYNAMIC;\n    let x = PhysicsConversions.toMetres(this.x);\n    let y = PhysicsConversions.toMetres(this.y);\n    bodyDef.position = new PhysicsType2d.Vector2(x, y);\n    bodyDef.linearDamping = 0.1;\n    return bodyDef;\n  }\n\n  getFixtures(): Array<PhysicsType2d.Dynamics.FixtureDefinition> {\n    let fd = new PhysicsType2d.Dynamics.FixtureDefinition();\n    let shape = new PhysicsType2d.Collision.Shapes.CircleShape();\n    let r = PhysicsConversions.toMetres(this.radius);\n    shape.m_radius = r;\n    fd.shape = shape;\n    fd.density = 0.25;\n    return [fd];\n  }\n}"]}