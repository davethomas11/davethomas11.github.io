{"version":3,"sources":["game/models/laser.ts"],"names":["game_object_1","require","velocity_module_1","game_1","Laser","_super","acceleration","angle","speed","call","this","LASER_LENGTH","velocityModule","default","constantAccelerateAtAngleXY","addModule","__extends","prototype","render","ctx","direction","x2","x","Math","cos","y2","y","sin","beginPath","strokeStyle","moveTo","lineTo","stroke","closePath","update","deltaMs","Info","viewPortWidth","viewPortHeight","alive","Object","defineProperty","exports","value"],"mappings":"sNAAAA,cAAAC,QAAuB,mCACvBC,kBAAAD,QAA2B,wCAC3BE,OAAAF,QAAiB,qBAEjBG,MAAA,SAAAC,GAKE,QAAAD,GAAYE,EAAsBC,EAAeC,GAC/CH,EAAAI,KAAAC,MAHOA,KAAAC,aAAuB,GAK9BD,KAAKE,eAAiB,GAAIV,mBAAAW,QAC1BH,KAAKE,eAAeE,4BAA4BR,EAAcC,EAAOC,GACrEE,KAAKK,UAAUL,KAAKE,gBA4BxB,MAtCmCI,WAAAZ,EAAAC,GAajCD,EAAAa,UAAAC,OAAA,SAAOC,GAEL,GAAIC,GAAYV,KAAKE,eAAeL,MAChCc,EAAKX,KAAKY,EAAIZ,KAAKC,aAAeY,KAAKC,IAAIJ,GAC3CK,EAAKf,KAAKgB,EAAIhB,KAAKC,aAAeY,KAAKI,IAAIP,EAE/CD,GAAIS,YACJT,EAAIU,YAAc,OAClBV,EAAIW,OAAOpB,KAAKY,EAAGZ,KAAKgB,GACxBP,EAAIY,OAAOV,EAAII,GACfN,EAAIa,SACJb,EAAIc,aAIN7B,EAAAa,UAAAiB,OAAA,SAAOC,GACL9B,EAAAY,UAAMiB,OAAMzB,KAAAC,KAACyB,IAETzB,KAAKY,EAAI,GAAKZ,KAAKgB,EAAI,GACvBhB,KAAKY,EAAInB,OAAAU,QAAKuB,KAAKC,eACnB3B,KAAKgB,EAAIvB,OAAAU,QAAKuB,KAAKE,kBAErB5B,KAAK6B,OAAQ,IAGnBnC,GAtCmCJ,cAAAa,QAAnC2B,QAAAC,eAAAC,QAAA,cAAAC,OAAA","file":"laser.js","sourcesContent":["import GameObject from '../../engine/models/game-object';\nimport VelocityModule from '../../engine/modules/velocity-module';\nimport Game from '../../engine/game'\n\nexport default class Laser extends GameObject {\n\n  private velocityModule: VelocityModule;\n  readonly LASER_LENGTH: number = 75;\n\n  constructor(acceleration: number, angle: number, speed: number) {\n    super();\n\n    this.velocityModule = new VelocityModule();\n    this.velocityModule.constantAccelerateAtAngleXY(acceleration, angle, speed);\n    this.addModule(this.velocityModule);\n  }\n\n  render(ctx: CanvasRenderingContext2D): void {\n\n    var direction = this.velocityModule.angle;\n    var x2 = this.x + this.LASER_LENGTH * Math.cos(direction);\n    var y2 = this.y + this.LASER_LENGTH * Math.sin(direction);\n\n    ctx.beginPath();\n    ctx.strokeStyle = \"#F00\";\n    ctx.moveTo(this.x, this.y);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.closePath();\n    \n  }\n\n  update(deltaMs: number) {\n    super.update(deltaMs);\n\n    if (this.x < 0 || this.y < 0 || \n        this.x > Game.Info.viewPortWidth || \n        this.y > Game.Info.viewPortHeight) {\n      \n      this.alive = false;\n    }\n  }\n}"]}