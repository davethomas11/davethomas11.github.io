{"version":3,"sources":["game/models/laser.ts"],"names":["game_object_1","require","velocity_module_1","rect_1","point_1","number_tools_1","physics_module_1","hitpoint_module_1","Laser","_super","acceleration","angle","speed","x","y","call","this","LASER_LENGTH","AMPLITUDE_OF_SINE","FREQUENCY_AMT","Math","PI","LASER_DMG","rect","default","point","velocityModule","constantAccelerateAtAngleXY","addModule","PhysicsModule","__extends","prototype","render","ctx","save","sineWave","stroke","restore","translate","rotate","beginPath","moveTo","lineTo","strokeStyle","closePath","frequency","sin","update","deltaMs","width","context","getViewPortWidth","height","getViewPortHeight","alive","rectContainsPoint","getBodyDefinition","bodyDef","PhysicsType2d","Dynamics","BodyDefinition","type","BodyType","DYNAMIC","PhysicsConversions","toMetres","position","Vector2","bullet","getFixtures","fd","FixtureDefinition","shape","Collision","Shapes","EdgeShape","point1","x2","cos","y2","point2","Set","isSensor","density","onContact","other","spawner","hpModule","getModule","undefined","reduce","Object","defineProperty","exports","value"],"mappings":"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","file":"laser.js","sourcesContent":["import GameObject from '../../engine/models/game-object';\nimport VelocityModule from '../../engine/modules/velocity-module';\nimport Rect from '../../engine/geometry/rect';\nimport Point from '../../engine/geometry/point';\nimport NumberTools from '../../engine/util/number-tools';\nimport { PhysicsModule, PhysicsConversions, BodyDefinitionFactory } from '../../engine/modules/physics-module';\nimport HitPointModule from '../modules/hitpoint-module';\n\nexport default class Laser extends GameObject implements BodyDefinitionFactory {\n\n  readonly LASER_LENGTH: number = 120;\n  readonly AMPLITUDE_OF_SINE: number = 17;\n  readonly FREQUENCY_AMT: number = 90/180*Math.PI / 5;\n  readonly LASER_DMG: number = 5;\n\n  private velocityModule: VelocityModule;\n  private rect: Rect = new Rect(0,0,0,0);\n  private point: Point = new Point(0,0);\n\n  constructor(acceleration: number, angle: number, speed: number, x: number, y: number) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.velocityModule = new VelocityModule();\n    this.velocityModule.constantAccelerateAtAngleXY(acceleration, angle, speed);\n    this.addModule(this.velocityModule);\n    this.addModule(new PhysicsModule(this));\n  }\n\n  render(ctx: CanvasRenderingContext2D): void {\n\n    ctx.save();\n    \n    this.sineWave(ctx);\n    ctx.stroke();\n    \n    ctx.restore(); \n  }\n\n  sineWave(ctx: CanvasRenderingContext2D): void {\n\n    ctx.translate(this.x, this.y);\n    ctx.rotate(this.velocityModule.angle);\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(this.LASER_LENGTH, 0);\n    ctx.strokeStyle = \"#f442a4\";\n    ctx.stroke();\n    ctx.closePath(); \n\n    ctx.beginPath();\n    ctx.strokeStyle = \"#F00\";\n    let frequency = 0;\n\n    for (let x = 0; x < this.LASER_LENGTH; x++) {\n\n      let y = Math.sin(frequency) * this.AMPLITUDE_OF_SINE;\n      ctx.lineTo(x, y);\n      frequency += this.FREQUENCY_AMT;  \n    }\n  }\n\n  update(deltaMs: number) {\n    super.update(deltaMs);\n    this.point.x = this.x;\n    this.point.y = this.y;\n    this.rect.width = this.context!.getViewPortWidth();\n    this.rect.height = this.context!.getViewPortHeight();\n    this.alive = NumberTools.rectContainsPoint(this.rect, this.point);\n  }\n\n  getBodyDefinition(): PhysicsType2d.Dynamics.BodyDefinition {\n    let bodyDef = new PhysicsType2d.Dynamics.BodyDefinition();\n    bodyDef.type = PhysicsType2d.Dynamics.BodyType.DYNAMIC;\n    let x = PhysicsConversions.toMetres(this.x);\n    let y = PhysicsConversions.toMetres(this.y);\n    bodyDef.position = new PhysicsType2d.Vector2(x, y);\n    bodyDef.bullet = true;\n    return bodyDef;\n  }\n\n  getFixtures(): Array<PhysicsType2d.Dynamics.FixtureDefinition> {\n    let fd = new PhysicsType2d.Dynamics.FixtureDefinition();\n    let shape = new PhysicsType2d.Collision.Shapes.EdgeShape;\n    let point1 = new PhysicsType2d.Vector2(0, 0);\n    let x2 = PhysicsConversions.toMetres(Math.cos(this.velocityModule.angle) * this.LASER_LENGTH);\n    let y2 = PhysicsConversions.toMetres(Math.sin(this.velocityModule.angle) * this.LASER_LENGTH);\n    let point2 = new PhysicsType2d.Vector2(x2, y2);\n    shape.Set(point1, point2);\n    fd.isSensor = true;\n    fd.shape = shape;\n    fd.density = 0.25;\n    return [fd];\n  }\n\n  onContact(other: GameObject): void {\n     if (other == this.spawner) return;\n\n    this.alive = false;\n    let hpModule = other.getModule(HitPointModule) as HitPointModule;\n    if (hpModule != undefined) {\n      hpModule.reduce(this.LASER_DMG);\n    }\n  }\n  \n}"]}