{"version":3,"sources":["engine/modules/velocity-module.ts"],"names":["module_1","require","number_tools_1","VelocityModule","_super","maxVelocity","acceleration","deceleration","call","this","ANGLE_OFFSET","velocityX","VelocityDimension","velocityY","_angle","maxVelocityX","maxVelocityY","__extends","prototype","update","gameObject","deltaInMs","deltaInSeconds","x","velocity","y","Object","defineProperty","accelerateRight","accelerationX","accelerateLeft","accelerateUp","accelerationY","accelerateDown","decelerateRight","decelerationX","decelerateLeft","decelerateUp","decelerationY","decelerateDown","pixelsPerSecond","calculateAngle","constantAccelerateAtAngleXY","angle","speed","Math","cos","sin","abs","xFactor","yFactor","accelerating","atan2","default","exports","value","_velocity","_acceleration","_accelerating","accelerationChange","maxVel","minVel","clamp"],"mappings":"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","file":"velocity-module.js","sourcesContent":["import Module from './module'\nimport GameObject from '../models/game-object'\nimport NumberTools from '../util/number-tools'\n\nexport default class VelocityModule extends Module {\n\n  readonly ANGLE_OFFSET = -1.5708 // negative 90 degeress\n\n  private velocityX: VelocityDimension = new VelocityDimension();\n  private velocityY: VelocityDimension = new VelocityDimension();\n\n  private maxVelocityX: number;\n  private maxVelocityY: number;\n  private acceleration: number;\n  private deceleration: number;\n  private _angle: number = 0;\n\n  constructor(maxVelocity: number = 0, acceleration: number = 0, deceleration: number = 0) {\n    super();\n    this.maxVelocityX = maxVelocity;\n    this.maxVelocityY = maxVelocity;\n    this.acceleration = acceleration;\n    this.deceleration = deceleration;\n  }\n\n  update(gameObject: GameObject, deltaInMs: number): void {\n\n    var deltaInSeconds = deltaInMs / 1000;\n    this.velocityX.update(deltaInSeconds, this.maxVelocityX);\n    this.velocityY.update(deltaInSeconds, this.maxVelocityY);\n\n    gameObject.x += deltaInSeconds * this.velocityX.velocity;\n    gameObject.y += deltaInSeconds * this.velocityY.velocity;\n\n    // if (this.velocityX.velocity != 0 || this.velocityY.velocity != 0) {\n    //   this._angle = Math.atan2(this.velocityX.velocity, -this.velocityY.velocity) + this.ANGLE_OFFSET;\n    // }\n  }\n\n  get velX() {\n    return this.velocityX.velocity;\n  }\n\n  get velY() {\n    return this.velocityY.velocity;\n  }\n\n  get angle() {\n    return this._angle;\n  }\n\n  accelerateRight(): void {\n    this.accelerationX = this.acceleration;\n  }\n\n  accelerateLeft(): void {\n    this.accelerationX = -this.acceleration;\n  }\n\n  accelerateUp(): void {\n    this.accelerationY = -this.acceleration;\n  }\n\n  accelerateDown(): void {\n    this.accelerationY = this.acceleration;\n  }\n\n  decelerateRight(): void {\n    this.decelerationX = -this.deceleration;\n  }\n\n  decelerateLeft(): void {\n    this.decelerationX = this.deceleration;\n  }\n\n  decelerateUp(): void {\n    this.decelerationY = this.deceleration;\n  }\n\n  decelerateDown(): void {\n    this.decelerationY = -this.deceleration;\n  }\n\n  set accelerationX(pixelsPerSecond: number) {\n    this.velocityX.acceleration = pixelsPerSecond;\n    this.calculateAngle();\n  }\n\n  set accelerationY(pixelsPerSecond: number) {\n    this.velocityY.acceleration = pixelsPerSecond;\n    this.calculateAngle();\n  }\n\n  set decelerationX(pixelsPerSecond: number) {\n    this.velocityX.deceleration = pixelsPerSecond;\n  }\n\n  set decelerationY(pixelsPerSecond: number) {\n    this.velocityY.deceleration = pixelsPerSecond;\n  }\n\n  constantAccelerateAtAngleXY(acceleration: number, angle: number, speed: number) {\n    this.maxVelocityX = speed * Math.cos(angle);\n    this.maxVelocityY = speed * Math.sin(angle);\n    this.accelerationX = Math.abs(acceleration) * Math.cos(angle);\n    this.accelerationY = Math.abs(acceleration) * Math.sin(angle);\n    this._angle = angle;\n  }\n\n  // TODO: This needs improvement. Angle changes needs to be smoother.\n  private calculateAngle() {\n\n    var xFactor = 0;\n    var yFactor = 0;\n    if (this.velocityX.accelerating && this.velocityY.accelerating) {\n\n      xFactor = this.velocityX.velocity;\n      yFactor = this.velocityY.velocity;\n\n    } else if (this.velocityX.accelerating) {\n\n      xFactor = this.velocityX.acceleration;\n      yFactor = this.velocityY.velocity;\n\n    } else if (this.velocityY.accelerating) {\n\n      xFactor = this.velocityX.velocity;\n      yFactor = this.velocityY.acceleration;\n    }\n\n    this._angle = Math.atan2(xFactor, -yFactor) + this.ANGLE_OFFSET;\n  }\n}\n\nclass VelocityDimension {\n\n  private _velocity: number = 0;\n  private _acceleration: number = 0;\n  private _accelerating: boolean = false;\n\n  get acceleration() {\n    return this._acceleration;\n  }\n\n  get accelerating() {\n    return this._accelerating;\n  }\n\n  set acceleration(pixelsPerSecond: number) {\n    this._accelerating = pixelsPerSecond === 0 ? false : true;\n    this._acceleration = pixelsPerSecond;\n  }\n\n  set deceleration(pixelsPerSecond: number) {\n    if ((this._acceleration > 0 && pixelsPerSecond < 0) ||\n        (this._acceleration < 0 && pixelsPerSecond > 0)) {     \n      this._accelerating = false;\n      this._acceleration = pixelsPerSecond;\n    }\n  }\n\n  get velocity() {\n    return this._velocity;\n  }\n\n  // TODO: Fix floatyness of switching directions\n  // Need to be able to go in oposite direction faster\n  // By apply force in other direction.\n\n  // TODO: Bug sometimes player maintains velocity after\n  // releasing the key. Deceleration does not happen.\n  update(deltaInSeconds: number, maxVelocity: number): void {\n    if (this._acceleration == 0) {\n      this._velocity = 0;\n      return;\n    }\n\n    var accelerationChange = deltaInSeconds * this._acceleration;\n    var maxVel = maxVelocity;\n    var minVel = -maxVelocity;\n\n    if (!this._accelerating) {\n      if (this._velocity > 0) {\n        minVel = 0;\n      } else if (this._velocity < 0) {\n        maxVel = 0;\n      }\n    }\n\n    this._velocity += accelerationChange;\n    this._velocity = NumberTools.clamp(this._velocity, minVel, maxVel);\n\n    if (this._velocity == 0) {\n      this._acceleration = 0;\n      this._accelerating = false;\n    }\n  }\n}"]}