{"version":3,"sources":["engine/modules/point-module.ts"],"names":["Module_1","require","PointModule","_super","apply","this","arguments","__extends","prototype","onExhausted","cb","exhaustedCallback","onReduced","reducedCallback","onMaxIncreased","increasedMaxCallback","onRefilled","refilledCallback","increaseMax","by","refill","_maxPoints","_points","reduce","Object","defineProperty","default","exports","value"],"mappings":"sNAAAA,SAAAC,QAAmB,YAGnBC,YAAA,SAAAC,GAAA,QAAAD,KAAyCC,EAAAC,MAAAC,KAAAC,WAoHzC,MApHyCC,WAAAL,EAAAC,GAkBvCD,EAAAM,UAAAC,YAAA,SAAYC,GACVL,KAAKM,kBAAoBD,GAW3BR,EAAAM,UAAAI,UAAA,SAAUF,GACRL,KAAKQ,gBAAkBH,GAWzBR,EAAAM,UAAAM,eAAA,SAAeJ,GACbL,KAAKU,qBAAuBL,GAW9BR,EAAAM,UAAAQ,WAAA,SAAWN,GACTL,KAAKY,iBAAmBP,GAW1BR,EAAAM,UAAAU,YAAA,SAAYC,EAAYC,GACtBf,KAAKgB,YAAcF,EACfC,GACFf,KAAKe,OAAOf,KAAKgB,WAAahB,KAAKiB,SAGjCjB,KAAKU,sBAAsBV,KAAKU,wBAUtCb,EAAAM,UAAAY,OAAA,SAAOD,GACLd,KAAKiB,SAAWH,EAEZd,KAAKiB,SAAWjB,KAAKgB,aACvBhB,KAAKiB,QAAUjB,KAAKgB,YAGlBhB,KAAKY,kBAAkBZ,KAAKY,oBAUlCf,EAAAM,UAAAe,OAAA,SAAOJ,GACLd,KAAKiB,SAAWH,EACZd,KAAKiB,SAAW,IAClBjB,KAAKiB,QAAU,EACXjB,KAAKM,mBAAmBN,KAAKM,qBAG/BN,KAAKQ,iBAAiBR,KAAKQ,mBAGjCW,OAAAC,eAAIvB,EAAAM,UAAA,cAAJ,WACE,MAAOH,MAAKiB,yCAGdE,OAAAC,eAAIvB,EAAAM,UAAA,iBAAJ,WACE,MAAOH,MAAKgB,4CAEhBnB,GApHyCF,SAAA0B,QAAzCF,QAAAC,eAAAE,QAAA,cAAAC,OAAA","file":"point-module.js","sourcesContent":["import Module from './Module'\n\n// System for tracking hit points, magic points or other types of game character points\nexport default class PointModule extends Module {\n\n  private refilledCallback: Function;\n  private exhaustedCallback: Function;\n  private reducedCallback: Function;\n  private increasedMaxCallback: Function;\n  \n  protected _points: number;\n  protected _maxPoints: number;\n\n  /**\n   * Register a callback to be called\n   * when the point module is empty\n   * \n   * @param {Function} cb\n   * \n   * @memberOf PointModule\n   */\n  onExhausted(cb: Function): void {\n    this.exhaustedCallback = cb;\n  }\n\n  /**\n   * Register a callback to be called\n   * when the point module is reduced by any amount\n   * \n   * @param {Function} cb\n   * \n   * @memberOf PointModule\n   */\n  onReduced(cb: Function): void {\n    this.reducedCallback = cb;\n  }\n\n  /**\n   * Register a callback to be called\n   * when the point module has it's max increased\n   * \n   * @param {Function} cb\n   * \n   * @memberOf PointModule\n   */\n  onMaxIncreased(cb: Function): void {\n    this.increasedMaxCallback = cb;\n  }\n\n  /**\n   * Register a callback to be called\n   * when the point module is refilled by any amount\n   * \n   * @param {Function} cb\n   * \n   * @memberOf PointModule\n   */\n  onRefilled(cb: Function): void {\n    this.refilledCallback = cb;\n  }\n\n  /**\n   * Inscrease the point module max ammount\n   * \n   * @param {number} by - this amount\n   * @param {boolean} refill - whether to refill points as well\n   * \n   * @memberOf PointModule\n   */\n  increaseMax(by: number, refill: boolean): void {\n    this._maxPoints += by;\n    if (refill) {\n      this.refill(this._maxPoints - this._points);\n    }\n\n    if (this.increasedMaxCallback) this.increasedMaxCallback();\n  }\n\n  /**\n   * Refill the points towards max\n   * \n   * @param {number} by - this amount\n   * \n   * @memberOf PointModule\n   */\n  refill(by: number): void {\n    this._points += by;\n\n    if (this._points >= this._maxPoints) {\n      this._points = this._maxPoints;\n    }\n\n    if (this.refilledCallback) this.refilledCallback();\n  }\n\n  /**\n   * Reduce the points towards zero\n   * \n   * @param {number} by - this amount\n   * \n   * @memberOf PointModule\n   */\n  reduce(by: number): void {\n    this._points -= by;\n    if (this._points <= 0) {\n      this._points = 0;\n      if (this.exhaustedCallback) this.exhaustedCallback();\n    }\n\n    if (this.reducedCallback) this.reducedCallback();\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get maxPoints() {\n    return this._maxPoints;\n  }\n}"]}