{"version":3,"sources":["engine/modules/physics-module.ts"],"names":["module_1","require","PhysicsConversions","toMetres","pixels","this","METRES_PER_PIXEL","toPixels","metres","PIXELS_PER_METRE","exports","PhysicsModule","_super","factory","call","vector","PhysicsType2d","Vector2","__extends","prototype","onAttach","gameObject","context","_this","body","createPhysicsBody","getBodyDefinition","SetUserData","getFixtures","forEach","f","CreateFixtureFromDefinition","onDetach","undefined","destroyPhysicBody","update","parent","deltaMs","x","GetPosition","y","applyForce","ApplyLinearImpulse","GetLocalCenter","setVelocity","SetLinearVelocity","default"],"mappings":"sNAAAA,SAAAC,QAAmB,YASnBC,mBAAA,WAAA,QAAAA,MAWA,MAPSA,GAAAC,SAAP,SAAgBC,GACd,MAAOA,GAASC,KAAKC,kBAGhBJ,EAAAK,SAAP,SAAgBC,GACd,MAAOA,GAASH,KAAKI,kBARCP,EAAAI,iBAAmB,IACnBJ,EAAAO,iBAAmB,GAS7CP,IAXaQ,SAAAR,mBAAkBA,kBAa/B,IAAAS,eAAA,SAAAC,GAME,QAAAD,GAAYE,GACVD,EAAAE,KAAAT,MACAA,KAAKQ,QAAUA,EACfR,KAAKU,OAAS,GAAIC,eAAcC,QAAQ,EAAE,GA+B9C,MAxCmCC,WAAAP,EAAAC,GAYjCD,EAAAQ,UAAAC,SAAA,SAASC,EAAwBC,GAAjC,GAAAC,GAAAlB,IACEA,MAAKmB,KAAOF,EAAQG,kBAAkBpB,KAAKQ,QAAQa,qBACnDrB,KAAKmB,KAAKG,YAAYN,GACtBhB,KAAKQ,QAAQe,cAAcC,QAAQ,SAAAC,GAAOP,EAAKC,KAAMO,4BAA4BD,MAGnFnB,EAAAQ,UAAAa,SAAA,SAASX,EAAwBC,GAC/BjB,KAAKmB,KAAMG,YAAYM,QACvBX,EAAQY,kBAAkB7B,KAAKmB,MAC/BnB,KAAKmB,KAAOS,QAGdtB,EAAAQ,UAAAgB,OAAA,SAAOC,EAAoBC,GACR,MAAbhC,KAAKmB,OACPY,EAAOE,EAAIpC,mBAAmBK,SAASF,KAAKmB,KAAKe,cAAcD,GAC/DF,EAAOI,EAAItC,mBAAmBK,SAASF,KAAKmB,KAAKe,cAAcC,KAInE7B,EAAAQ,UAAAsB,WAAA,SAAW1B,GACQ,MAAbV,KAAKmB,MACTnB,KAAKmB,KAAKkB,mBAAmB3B,EAAQV,KAAKmB,KAAKmB,mBAGjDhC,EAAAQ,UAAAyB,YAAA,SAAY7B,GACO,MAAbV,KAAKmB,MACTnB,KAAKmB,KAAKqB,kBAAkB9B,IAEhCJ,GAxCmCX,SAAA8C,QAAtBpC,SAAAC,cAAaA","file":"physics-module.js","sourcesContent":["import Module from './module'\nimport GameObject from '../models/game-object'\nimport GameContext from '../models/game-context'\n\nexport interface BodyDefinitionFactory {\n  getBodyDefinition(): PhysicsType2d.Dynamics.BodyDefinition;\n  getFixtures(): Array<PhysicsType2d.Dynamics.FixtureDefinition>;\n}\n\nexport class PhysicsConversions {\n  private static readonly METRES_PER_PIXEL = 0.02;\n  private static readonly PIXELS_PER_METRE = 50;\n  \n  static toMetres(pixels: number): number {\n    return pixels * this.METRES_PER_PIXEL;\n  }\n\n  static toPixels(metres: number): number {\n    return metres * this.PIXELS_PER_METRE;\n  }\n}\n\nexport class PhysicsModule extends Module {\n\n  private body: PhysicsType2d.Dynamics.Body | undefined;\n  private factory: BodyDefinitionFactory;\n  private vector: PhysicsType2d.Vector2;\n\n  constructor(factory: BodyDefinitionFactory) {\n    super();\n    this.factory = factory;\n    this.vector = new PhysicsType2d.Vector2(0,0);\n  }\n\n  onAttach(gameObject: GameObject, context: GameContext): void {\n    this.body = context.createPhysicsBody(this.factory.getBodyDefinition());\n    this.body.SetUserData(gameObject);\n    this.factory.getFixtures().forEach(f => { this.body!.CreateFixtureFromDefinition(f) });\n  }\n\n  onDetach(gameObject: GameObject, context: GameContext): void {\n    this.body!.SetUserData(undefined);\n    context.destroyPhysicBody(this.body!);\n    this.body = undefined;\n  }\n\n  update(parent: GameObject, deltaMs: number): void {\n    if (this.body != null) {\n      parent.x = PhysicsConversions.toPixels(this.body.GetPosition().x);\n      parent.y = PhysicsConversions.toPixels(this.body.GetPosition().y);\n    }\n  }\n\n  applyForce(vector: PhysicsType2d.Vector2): void {\n    if (this.body != null)\n    this.body.ApplyLinearImpulse(vector, this.body.GetLocalCenter())\n  }\n\n  setVelocity(vector: PhysicsType2d.Vector2): void {\n    if (this.body != null)\n    this.body.SetLinearVelocity(vector);\n  }\n}"]}