{"version":3,"sources":["engine/input-controllers/keyboard-input.ts"],"names":["array_utils_1","require","KeyboardController","_this","this","mappings","hasDownHandler","hasUpHandler","hasPressHandler","downEventListener","e","keyDown","upEventListener","keyUp","pressEventListener","keyPress","prototype","bind","window","addEventListener","unbind","removeEventListener","event","forEach","mapping","handleDown","code","handleUp","handlePress","attachKeyboardMapping","push","assessmentOfMapping","removeKeyboardMapping","default","remove","m","isHandlingDown","isHandlingUp","isHandlingPress","Object","defineProperty","exports","value"],"mappings":"YACA,IAAAA,eAAAC,QAAuB,yBAGvBC,mBAAA,WAAA,QAAAA,KAAA,GAAAC,GAAAC,IAEUA,MAAAC,YAEAD,KAAAE,eAAyB,EACzBF,KAAAG,aAAuB,EACvBH,KAAAI,gBAA0B,EAG1BJ,KAAAK,kBACN,SAACC,GAAqB,MAAAP,GAAKQ,QAAQD,IAC7BN,KAAAQ,gBACN,SAACF,GAAqB,MAAAP,GAAKU,MAAMH,IAC3BN,KAAAU,mBACN,SAACJ,GAAqB,MAAAP,GAAKY,SAASL,IAuDxC,MArDER,GAAAc,UAAAC,KAAA,WACEC,OAAOC,iBAAiB,UAAWf,KAAKK,mBACxCS,OAAOC,iBAAiB,QAASf,KAAKQ,iBACtCM,OAAOC,iBAAiB,WAAYf,KAAKU,qBAG3CZ,EAAAc,UAAAI,OAAA,WACEF,OAAOG,oBAAoB,UAAWjB,KAAKO,SAC3CO,OAAOG,oBAAoB,QAASjB,KAAKS,OACzCK,OAAOG,oBAAoB,WAAYjB,KAAKW,WAG9Cb,EAAAc,UAAAL,QAAA,SAAQW,GACDlB,KAAKE,gBAEVF,KAAKC,SAASkB,QAAQ,SAACC,GACrBA,EAAQC,WAAWH,EAAMI,SAI7BxB,EAAAc,UAAAH,MAAA,SAAMS,GACClB,KAAKG,cAEVH,KAAKC,SAASkB,QAAQ,SAACC,GACrBA,EAAQG,SAASL,EAAMI,SAI3BxB,EAAAc,UAAAD,SAAA,SAASO,GAEFlB,KAAKI,iBAEVJ,KAAKC,SAASkB,QAAQ,SAACC,GACrBA,EAAQI,YAAYN,EAAMI,SAI9BxB,EAAAc,UAAAa,sBAAA,SAAsBL,GACpBpB,KAAKC,SAASyB,KAAKN,GACnBpB,KAAK2B,oBAAoBP,IAG3BtB,EAAAc,UAAAgB,sBAAA,SAAsBR,GAAtB,GAAArB,GAAAC,IACEJ,eAAAiC,QAAWC,OAAOV,EAASpB,KAAKC,UAChCD,KAAKE,eAAiBF,KAAKG,aAAeH,KAAKI,gBAAkB,EACjEJ,KAAKC,SAASkB,QAAQ,SAACY,GAAM,MAAAhC,GAAK4B,oBAAoBI,MAGhDjC,EAAAc,UAAAe,oBAAR,SAA4BP,GAC1BpB,KAAKE,gBAAkBkB,EAAQY,iBAAmB,EAAI,EACtDhC,KAAKG,cAAgBiB,EAAQa,eAAiB,EAAI,EAClDjC,KAAKI,iBAAmBgB,EAAQc,kBAAoB,EAAI,GAE5DpC,IArEAqC,QAAAC,eAAAC,QAAA,cAAAC,OAAA","file":"keyboard-input.js","sourcesContent":["import KeyboardMapping from './keyboard-mapping'\nimport ArrayUtils from './../util/array-utils'\nimport InputController from './input-controller'\n\nexport default class KeyboardController implements InputController {\n\n  private mappings: Array<KeyboardMapping> = [];\n\n  private hasDownHandler: number = 0;\n  private hasUpHandler: number = 0;\n  private hasPressHandler: number = 0;\n\n  // These functions need to be wrapped to protect `this` context\n  private downEventListener: EventListenerOrEventListenerObject = \n    (e: KeyboardEvent) => this.keyDown(e);\n  private upEventListener: EventListenerOrEventListenerObject = \n    (e: KeyboardEvent) => this.keyUp(e);\n  private pressEventListener: EventListenerOrEventListenerObject = \n    (e: KeyboardEvent) => this.keyPress(e);\n\n  bind(): void {\n    window.addEventListener(\"keydown\", this.downEventListener);\n    window.addEventListener(\"keyup\", this.upEventListener);\n    window.addEventListener(\"keypress\", this.pressEventListener);\n  }\n\n  unbind(): void {\n    window.removeEventListener(\"keydown\", this.keyDown);\n    window.removeEventListener(\"keyup\", this.keyUp);\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  keyDown(event: KeyboardEvent): void {\n    if (!this.hasDownHandler) return;\n\n    this.mappings.forEach((mapping) => {\n      mapping.handleDown(event.code);\n    });\n  }\n\n  keyUp(event: KeyboardEvent): void {\n    if (!this.hasUpHandler) return;\n\n    this.mappings.forEach((mapping) => {\n      mapping.handleUp(event.code);\n    });\n  }\n\n  keyPress(event: KeyboardEvent): void {\n\n    if (!this.hasPressHandler) return;\n\n    this.mappings.forEach((mapping) => {\n      mapping.handlePress(event.code);\n    });\n  }\n\n  attachKeyboardMapping(mapping: KeyboardMapping): void {\n    this.mappings.push(mapping);\n    this.assessmentOfMapping(mapping);\n  }\n\n  removeKeyboardMapping(mapping: KeyboardMapping): void {\n    ArrayUtils.remove(mapping, this.mappings);\n    this.hasDownHandler = this.hasUpHandler = this.hasPressHandler = 0;\n    this.mappings.forEach((m) => this.assessmentOfMapping(m));\n  }\n\n  private assessmentOfMapping(mapping: KeyboardMapping): void {\n    this.hasDownHandler |= mapping.isHandlingDown() ? 1 : 0;\n    this.hasUpHandler |= mapping.isHandlingUp() ? 1 : 0;\n    this.hasPressHandler |= mapping.isHandlingPress() ? 1 : 0;\n  }\n}"]}