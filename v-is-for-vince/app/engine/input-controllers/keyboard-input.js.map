{"version":3,"sources":["engine/input-controllers/keyboard-input.ts"],"names":["array_utils_1","require","input_controller_1","KeyboardController","_super","_this","this","apply","arguments","mappings","hasDownHandler","hasUpHandler","hasPressHandler","downEventListener","e","keyDown","upEventListener","keyUp","pressEventListener","keyPress","__extends","prototype","bind","window","addEventListener","unbind","removeEventListener","event","forEach","mapping","handleDown","code","handleUp","handlePress","attachKeyboardMapping","push","assessmentOfMapping","removeKeyboardMapping","default","remove","isHandlingDown","isHandlingUp","isHandlingPress","Object","defineProperty","exports","value"],"mappings":"sNACAA,cAAAC,QAAuB,yBACvBC,mBAAAD,QAA4B,sBAE5BE,mBAAA,SAAAC,GAAA,QAAAD,KAAA,GAAAE,GAAAC,IAAgDF,GAAAG,MAAAD,KAAAE,WAEtCF,KAAAG,YAEAH,KAAAI,eAAyB,EACzBJ,KAAAK,aAAuB,EACvBL,KAAAM,gBAA0B,EAG1BN,KAAAO,kBACN,SAACC,GAAqB,MAAAT,GAAKU,QAAQD,IAC7BR,KAAAU,gBACN,SAACF,GAAqB,MAAAT,GAAKY,MAAMH,IAC3BR,KAAAY,mBACN,SAACJ,GAAqB,MAAAT,GAAKc,SAASL,IAuDxC,MArEgDM,WAAAjB,EAAAC,GAgB9CD,EAAAkB,UAAAC,KAAA,WACEC,OAAOC,iBAAiB,UAAWlB,KAAKO,mBACxCU,OAAOC,iBAAiB,QAASlB,KAAKU,iBACtCO,OAAOC,iBAAiB,WAAYlB,KAAKY,qBAG3Cf,EAAAkB,UAAAI,OAAA,WACEF,OAAOG,oBAAoB,UAAWpB,KAAKS,SAC3CQ,OAAOG,oBAAoB,QAASpB,KAAKW,OACzCM,OAAOG,oBAAoB,WAAYpB,KAAKa,WAG9ChB,EAAAkB,UAAAN,QAAA,SAAQY,GACDrB,KAAKI,gBAEVJ,KAAKG,SAASmB,QAAQ,SAACC,GACrBA,EAAQC,WAAWH,EAAMI,SAI7B5B,EAAAkB,UAAAJ,MAAA,SAAMU,GACCrB,KAAKK,cAEVL,KAAKG,SAASmB,QAAQ,SAACC,GACrBA,EAAQG,SAASL,EAAMI,SAI3B5B,EAAAkB,UAAAF,SAAA,SAASQ,GAEFrB,KAAKM,iBAEVN,KAAKG,SAASmB,QAAQ,SAACC,GACrBA,EAAQI,YAAYN,EAAMI,SAI9B5B,EAAAkB,UAAAa,sBAAA,SAAsBL,GACpBvB,KAAKG,SAAS0B,KAAKN,GACnBvB,KAAK8B,oBAAoBP,IAG3B1B,EAAAkB,UAAAgB,sBAAA,SAAsBR,GACpB7B,cAAAsC,QAAWC,OAAOV,EAASvB,KAAKG,UAChCH,KAAKI,eAAiBJ,KAAKK,aAAeL,KAAKM,gBAAkB,EACjEN,KAAKG,SAASmB,QAAQtB,KAAK8B,sBAGrBjC,EAAAkB,UAAAe,oBAAR,SAA4BP,GAC1BvB,KAAKI,gBAAkBmB,EAAQW,iBAAmB,EAAI,EACtDlC,KAAKK,cAAgBkB,EAAQY,eAAiB,EAAI,EAClDnC,KAAKM,iBAAmBiB,EAAQa,kBAAoB,EAAI,GAE5DvC,GArEgDD,mBAAAoC,QAAhDK,QAAAC,eAAAC,QAAA,cAAAC,OAAA","file":"keyboard-input.js","sourcesContent":["import KeyboardMapping from './keyboard-mapping'\nimport ArrayUtils from './../util/array-utils'\nimport InputController from './input-controller'\n\nexport default class KeyboardController extends InputController {\n\n  private mappings: Array<KeyboardMapping> = [];\n\n  private hasDownHandler: number = 0;\n  private hasUpHandler: number = 0;\n  private hasPressHandler: number = 0;\n\n  // These functions need to be wrapped to protect `this` context\n  private downEventListener: EventListenerOrEventListenerObject = \n    (e: KeyboardEvent) => this.keyDown(e);\n  private upEventListener: EventListenerOrEventListenerObject = \n    (e: KeyboardEvent) => this.keyUp(e);\n  private pressEventListener: EventListenerOrEventListenerObject = \n    (e: KeyboardEvent) => this.keyPress(e);\n\n  bind(): void {\n    window.addEventListener(\"keydown\", this.downEventListener);\n    window.addEventListener(\"keyup\", this.upEventListener);\n    window.addEventListener(\"keypress\", this.pressEventListener);\n  }\n\n  unbind(): void {\n    window.removeEventListener(\"keydown\", this.keyDown);\n    window.removeEventListener(\"keyup\", this.keyUp);\n    window.removeEventListener(\"keypress\", this.keyPress);\n  }\n\n  keyDown(event: KeyboardEvent): void {\n    if (!this.hasDownHandler) return;\n\n    this.mappings.forEach((mapping) => {\n      mapping.handleDown(event.code);\n    });\n  }\n\n  keyUp(event: KeyboardEvent): void {\n    if (!this.hasUpHandler) return;\n\n    this.mappings.forEach((mapping) => {\n      mapping.handleUp(event.code);\n    });\n  }\n\n  keyPress(event: KeyboardEvent): void {\n\n    if (!this.hasPressHandler) return;\n\n    this.mappings.forEach((mapping) => {\n      mapping.handlePress(event.code);\n    });\n  }\n\n  attachKeyboardMapping(mapping: KeyboardMapping): void {\n    this.mappings.push(mapping);\n    this.assessmentOfMapping(mapping);\n  }\n\n  removeKeyboardMapping(mapping: KeyboardMapping): void {\n    ArrayUtils.remove(mapping, this.mappings);\n    this.hasDownHandler = this.hasUpHandler = this.hasPressHandler = 0;\n    this.mappings.forEach(this.assessmentOfMapping);\n  }\n\n  private assessmentOfMapping(mapping: KeyboardMapping): void {\n    this.hasDownHandler |= mapping.isHandlingDown() ? 1 : 0;\n    this.hasUpHandler |= mapping.isHandlingUp() ? 1 : 0;\n    this.hasPressHandler |= mapping.isHandlingPress() ? 1 : 0;\n  }\n}"]}