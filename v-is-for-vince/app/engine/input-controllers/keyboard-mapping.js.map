{"version":3,"sources":["engine/input-controllers/keyboard-mapping.ts"],"names":["KeyboardMapping","this","press","onDown","onUp","prototype","registerPress","key","action","registerOnDown","registerOnUp","handlePress","handleEvent","handleDown","handleUp","isHandlingUp","Object","keys","length","isHandlingDown","isHandlingPress","handler","defineProperty","exports","value"],"mappings":"YAAA,IAAAA,iBAAA,WAAA,QAAAA,KAEUC,KAAAC,SACAD,KAAAE,UACAF,KAAAG,QAyCV,MAvCEJ,GAAAK,UAAAC,cAAA,SAAcC,EAAaC,GACzBP,KAAKC,MAAMK,GAAOC,GAGpBR,EAAAK,UAAAI,eAAA,SAAeF,EAAaC,GAC1BP,KAAKE,OAAOI,GAAOC,GAGrBR,EAAAK,UAAAK,aAAA,SAAaH,EAAaC,GACxBP,KAAKG,KAAKG,GAAOC,GAGnBR,EAAAK,UAAAM,YAAA,SAAYJ,GACVN,KAAKW,YAAYL,EAAKN,KAAKC,QAG7BF,EAAAK,UAAAQ,WAAA,SAAWN,GACTN,KAAKW,YAAYL,EAAKN,KAAKE,SAG7BH,EAAAK,UAAAS,SAAA,SAASP,GACPN,KAAKW,YAAYL,EAAKN,KAAKG,OAG7BJ,EAAAK,UAAAU,aAAA,WACE,MAAOC,QAAOC,KAAKhB,KAAKG,MAAMc,OAAS,GAGzClB,EAAAK,UAAAc,eAAA,WACE,MAAOH,QAAOC,KAAKhB,KAAKE,QAAQe,OAAS,GAG3ClB,EAAAK,UAAAe,gBAAA,WACE,MAAOJ,QAAOC,KAAKhB,KAAKC,OAAOgB,OAAS,GAGlClB,EAAAK,UAAAO,YAAR,SAAoBL,EAAYc,GACV,MAAhBA,EAAQd,IAAcc,EAAQd,MAEtCP,IA7CAgB,QAAAM,eAAAC,QAAA,cAAAC,OAAA","file":"keyboard-mapping.js","sourcesContent":["export default class KeyboardMapping {\n\n  private press: { [key:string]:Function } = {};\n  private onDown: { [key:string]:Function } = {};\n  private onUp: { [key:string]:Function } = {};\n\n  registerPress(key: string, action: Function): void {\n    this.press[key] = action;\n  }\n\n  registerOnDown(key: string, action: Function): void {\n    this.onDown[key] = action;\n  }\n\n  registerOnUp(key: string, action: Function): void {\n    this.onUp[key] = action;\n  }\n\n  handlePress(key: string): void {\n    this.handleEvent(key, this.press);\n  }\n\n  handleDown(key:string): void {\n    this.handleEvent(key, this.onDown);\n  }\n\n  handleUp(key:string): void {\n    this.handleEvent(key, this.onUp);\n  }\n\n  isHandlingUp(): boolean {\n    return Object.keys(this.onUp).length > 0;\n  }\n\n  isHandlingDown(): boolean {\n    return Object.keys(this.onDown).length > 0;\n  }\n\n  isHandlingPress(): boolean {\n    return Object.keys(this.press).length > 0;\n  }\n\n  private handleEvent(key:string, handler: { [key:string]:Function }) {\n    if (handler[key] != null) handler[key]();\n  }\n}"]}