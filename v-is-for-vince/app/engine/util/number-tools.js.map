{"version":3,"sources":["engine/util/number-tools.ts"],"names":["NumberTools","clamp","num","min","max","Math","round","decimalPlaces","Error","multiplier","pow","floor","rectContainsPoint","rect","point","containsX","x","width","containsY","y","height","stepTowards","from","to","step","Object","defineProperty","exports","value"],"mappings":"AAAA,YAKA,IAAAA,aAAA,WAAA,QAAAA,MAqDA,MAxCSA,GAAAC,MAAP,SAAaC,EAAaC,EAAaC,GACrC,MAAOC,MAAKF,IAAIE,KAAKD,IAAIF,EAAKC,GAAMC,IAa/BJ,EAAAM,MAAP,SAAaJ,EAAaK,GACxB,GADwB,SAAAA,IAAAA,EAAA,GACpBA,EAAgB,EAAG,KAAM,IAAIC,OAAM,4CAEvC,IAAIC,GAAaJ,KAAKK,IAAI,GAAIL,KAAKM,MAAMJ,GACzC,OAAQF,MAAKC,MAAMJ,EAAMO,GAAcA,GAGlCT,EAAAY,kBAAP,SAAyBC,EAAYC,GACnC,GAAIC,GAAYD,EAAME,GAAKH,EAAKG,GAAKF,EAAME,GAAKH,EAAKI,MACjDC,EAAYJ,EAAMK,GAAKN,EAAKM,GAAKL,EAAMK,GAAKN,EAAKO,MACrD,OAAOL,IAAaG,GAGflB,EAAAqB,YAAP,SAAmBC,EAAcC,EAAYC,GAC3C,MAD2C,UAAAA,IAAAA,EAAA,GACvCF,EAAOC,GACTD,GAAQE,EACJF,EAAOC,IAAID,EAAOC,GACfD,GACEA,EAAOC,GAChBD,GAAQE,EACJF,EAAOC,IAAID,EAAOC,GACfD,GAEAC,GAGbvB,IArDAyB,QAAAC,eAAAC,QAAA,cAAAC,OAAA","file":"number-tools.js","sourcesContent":["'use strict';\n\nimport Rect from '../geometry/rect'\nimport Point from '../geometry/point'\n\nexport default class NumberTools {\n  /**\n   * Clamp a number between a given maximum and minimum value. Any number below the minimum will be brought up to the\n   * minimum, and any number above the maximum will be brought down to the maximum.\n   *\n   * @param {number} num  The number to clamp.\n   * @param {number} min  The minimum allowed value.\n   * @param {number} max  The maximum allowed value.\n   * \n   * @returns {number} The given value, modified to fit between the min and max (inclusive).\n   * \n   * @author Tyler Smith\n   */\n  static clamp(num: number, min: number, max: number): number {\n    return Math.min(Math.max(num, min), max);\n  }\n\n  /**\n   * Rounds a number. This differs from Math.round in that you can provider a number of decimal places to round to.\n   * \n   * @param {number} num            The number to round.\n   * @param {number} decimalPlaces  The number of decimal places to round to.\n   * \n   * @returns {number} The rounded number.\n   * \n   * @author Tyler Smith\n   */\n  static round(num: number, decimalPlaces: number = 0): number {\n    if (decimalPlaces < 0) throw new Error('Decimal places must be a positive integer');\n\n    let multiplier = Math.pow(10, Math.floor(decimalPlaces));\n    return (Math.round(num * multiplier) / multiplier);\n  }\n\n  static rectContainsPoint(rect: Rect, point: Point): boolean {\n    let containsX = point.x >= rect.x && point.x <= rect.width;\n    let containsY = point.y >= rect.y && point.y <= rect.height;\n    return containsX && containsY;\n  }\n\n  static stepTowards(from: number, to: number, step:number = 1): number {\n    if (from < to ) {\n      from += step;\n      if (from > to) from = to;\n      return from;\n    } else if (from > to) {\n      from -= step;\n      if (from < to) from = to;\n      return from;\n    } else {\n      return to;\n    }\n  }\n}"]}