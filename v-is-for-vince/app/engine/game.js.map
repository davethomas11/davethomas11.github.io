{"version":3,"sources":["engine/game.ts"],"names":["frame_rate_1","require","render_engine_1","event_system_1","array_utils_1","Game","canvas","this","PHYSICS_TIME_STEP","PHYSICS_VELOCITY_ITERATIONS","PHYSICS_POSITION_ITERATIONS","viewPortWidth","viewPortHeight","physicsDeltaAccumulator","width","height","twoDContext","getContext","Error","context","gameObjects","inputControllers","running","gravity","PhysicsType2d","Vector2","physicsWorld","Dynamics","World","SetContactListener","CollisionHandler","prototype","start","update","forEach","e","bind","showFrameRate","isFrameRateVisible","frameRateOverlay","default","add","alive","setBounds","redraw","stop","currentFrame","unbind","gameObject","attach","push","remove","index","indexOf","splice","detach","addInput","inputController","removeAllGameObjects","i","length","render","timestamp","_this","delta","handleEvents","physicsStep","window","requestAnimationFrame","t","Step","getViewPortWidth","getViewPortHeight","getInputController","type","getByType","createPhysicsBody","def","CreateBody","destroyPhysicBody","body","DestroyBody","Object","defineProperty","exports","value","_super","apply","arguments","__extends","BeginContact","contact","call","objectA","GetFixtureA","GetBody","GetUserData","objectB","GetFixtureB","undefined","onContact","ContactListener"],"mappings":"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","file":"game.js","sourcesContent":["'use strict';\n\nimport FrameRate from './models/frame-rate';\nimport GameObject from './models/game-object';\nimport RenderEngine from './services/render-engine';\nimport InputController from './input-controllers/input-controller';\nimport GameEvent from './events/event';\nimport EventBus from './services/event-system';\nimport ArrayUtils from './util/array-utils';\nimport GameContext from './models/game-context';\n\nabstract class Game implements GameContext {\n\n  readonly PHYSICS_TIME_STEP = 1/120;\n  readonly PHYSICS_VELOCITY_ITERATIONS = 8;\n  readonly PHYSICS_POSITION_ITERATIONS = 3;\n\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private frameRateOverlay: FrameRate;\n  private gameObjects: Array<GameObject>;\n  private inputControllers: Array<InputController>;\n  private running: boolean;\n  private currentFrame: number;\n  private viewPortWidth: number = 0;\n  private viewPortHeight: number = 0;\n  private physicsWorld: PhysicsType2d.Dynamics.World;\n  private gravity: PhysicsType2d.Vector2;\n  private physicsDeltaAccumulator: number = 0;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.viewPortWidth = canvas.width;\n    this.viewPortHeight = canvas.height;\n    let twoDContext = canvas.getContext('2d');\n    if (twoDContext == null) {\n      throw new Error('Could not get the context from the canvas');\n    }\n    this.context = twoDContext;\n    this.gameObjects = [];\n    this.inputControllers = [];\n    this.running = false;\n\n    this.gravity = new PhysicsType2d.Vector2(0,0);\n    this.physicsWorld = new PhysicsType2d.Dynamics.World(this.gravity);\n    this.physicsWorld.SetContactListener(new CollisionHandler());\n  }\n\n  abstract getUniqueGameName(): string;\n\n  start(): void {\n    this.running = true;\n    this.update();\n    this.inputControllers.forEach(e => e.bind());\n  }\n\n  showFrameRate(isFrameRateVisible: boolean): void {\n    if (isFrameRateVisible) {\n      this.frameRateOverlay = new FrameRate();\n      this.add(this.frameRateOverlay);\n    } else {\n      this.frameRateOverlay.alive = false;\n    }\n  }\n\n  setBounds(width: number, height: number): void {\n    this.viewPortWidth = width;\n    this.viewPortHeight = height;\n\n    this.canvas.width = width;\n    this.canvas.height = height;\n\n    this.redraw();\n  }\n\n  stop(): void {\n    this.running = false;\n    this.currentFrame = 0;\n\n    this.inputControllers.forEach(e => e.unbind());\n  }\n\n  add(gameObject: GameObject): void {\n    gameObject.attach(this);\n    this.gameObjects.push(gameObject);\n  }\n\n  remove(gameObject: GameObject): void {\n    let index = this.gameObjects.indexOf(gameObject);\n    if (index != -1) {\n      this.gameObjects.splice(index, 1);\n      gameObject.detach(this);\n    }\n  }\n\n  addInput(inputController: InputController): void {\n    this.inputControllers.push(inputController);\n    if (this.running) inputController.bind();\n  } \n\n  removeAllGameObjects(): void {\n    for (let i = this.gameObjects.length - 1; i >= 0; i--) {\n      this.remove(this.gameObjects[i]);\n    } \n  }\n\n  redraw(): void {\n    RenderEngine.render(this.context, this.gameObjects, this);\n  }\n\n  update(timestamp: number = 0): void {\n\n    // Time update\n    var delta = 0;\n    if (timestamp > 0 && this.currentFrame > 0) {\n      delta = timestamp - this.currentFrame;\n    }\n    this.currentFrame = timestamp;\n\n    // Remove pass\n    for (let i = this.gameObjects.length - 1; i >= 0; i--) {\n      if (!this.gameObjects[i].alive) {\n        this.remove(this.gameObjects[i]);\n      }\n    } \n\n    // Event pass\n    EventBus.handleEvents(this);\n    \n    // Update pass\n    this.gameObjects.forEach(e => e.update(delta));\n\n    // Draw pass\n    this.redraw();\n    \n    // Attempt to keep physics step at constant rate\n    this.physicsDeltaAccumulator += delta;\n    while (this.physicsDeltaAccumulator > this.PHYSICS_TIME_STEP * 1000) {\n      this.physicsStep();\n      this.physicsDeltaAccumulator -= this.PHYSICS_TIME_STEP * 1000;\n    }\n\n    // Loop\n    if (this.running) {\n      window.requestAnimationFrame((t) => this.update(t));\n    }\n  }\n\n  physicsStep(): void {\n    // Physics must update at a constant time step independent of variable frame rate.\n    // It is recommended by the libarary: http://physicstype2d.com/index.html\n    this.physicsWorld.Step(this.PHYSICS_TIME_STEP, this.PHYSICS_VELOCITY_ITERATIONS, this.PHYSICS_POSITION_ITERATIONS);\n  }\n\n  getViewPortWidth(): number {\n    return this.viewPortWidth;\n  }\n\n  getViewPortHeight(): number {\n    return this.viewPortHeight\n  }\n\n  getInputController(type: any): InputController | undefined {\n    return ArrayUtils.getByType(type, this.inputControllers);\n  }\n\n  createPhysicsBody(def: PhysicsType2d.Dynamics.BodyDefinition): PhysicsType2d.Dynamics.Body {\n    return this.physicsWorld.CreateBody(def);\n  }\n\n  destroyPhysicBody(body: PhysicsType2d.Dynamics.Body): void {\n    this.physicsWorld.DestroyBody(body);\n  }\n};\n\nexport default Game\n\nclass CollisionHandler extends PhysicsType2d.Dynamics.ContactListener {\n\n  BeginContact(contact: PhysicsType2d.Dynamics.Contacts.Contact): void {\n    super.BeginContact(contact);\n\n    let objectA = contact.GetFixtureA().GetBody().GetUserData() as GameObject;\n    let objectB = contact.GetFixtureB().GetBody().GetUserData() as GameObject;\n\n    if (objectA != undefined && objectB != undefined) {\n      objectA.onContact(objectB);\n      objectB.onContact(objectA);\n    }\n  }\n\n}"]}