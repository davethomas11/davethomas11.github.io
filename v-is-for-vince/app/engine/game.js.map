{"version":3,"sources":["engine/game.ts"],"names":["frame_rate_1","require","render_engine_1","event_system_1","array_utils_1","Game","canvas","this","twoDContext","getContext","Error","context","gameObjects","inputControllers","running","prototype","start","update","forEach","e","bind","showFrameRate","isFrameRateVisible","frameRateOverlay","default","add","alive","setBounds","width","height","_viewPortWidth","_viewPortHeight","redraw","stop","currentFrame","unbind","gameObject","push","addInput","inputController","removeAllGameObjects","render","timestamp","_this","delta","i","length","splice","events","handleEvent","shift","window","requestAnimationFrame","t","getInputController","type","getByType","Info","class_1","Object","defineProperty","EventBus","class_2","post","event","exports","value"],"mappings":"AAAA,YAEA,IAAAA,cAAAC,QAAsB,uBAEtBC,gBAAAD,QAAyB,4BAGzBE,eAAAF,QAAwB,2BACxBG,cAAAH,QAAuB,sBAEvBI,KAAA,WASE,QAAAA,GAAYC,GACVC,KAAKD,OAASA,CACd,IAAIE,GAAcF,EAAOG,WAAW,KACpC,IAAmB,MAAfD,EACF,KAAM,IAAIE,OAAM,4CAElBH,MAAKI,QAAUH,EACfD,KAAKK,eACLP,EAAKQ,oBACLN,KAAKO,SAAU,EAiHnB,MA9GET,GAAAU,UAAAC,MAAA,WACET,KAAKO,SAAU,EACfP,KAAKU,SAELZ,EAAKQ,iBAAiBK,QAAQ,SAAAC,GAAK,MAAAA,GAAEC,UAGvCf,EAAAU,UAAAM,cAAA,SAAcC,GACRA,GACFf,KAAKgB,iBAAmB,GAAIvB,cAAAwB,QAC5BjB,KAAKkB,IAAIlB,KAAKgB,mBAEdhB,KAAKgB,iBAAiBG,OAAQ,GAIlCrB,EAAAU,UAAAY,UAAA,SAAUC,EAAeC,GACvBxB,EAAKyB,eAAiBF,EACtBvB,EAAK0B,gBAAkBF,EAEvBtB,KAAKD,OAAOsB,MAAQA,EACpBrB,KAAKD,OAAOuB,OAASA,EAErBtB,KAAKyB,UAGP3B,EAAAU,UAAAkB,KAAA,WACE1B,KAAKO,SAAU,EACfP,KAAK2B,aAAe,EAEpB7B,EAAKQ,iBAAiBK,QAAQ,SAAAC,GAAK,MAAAA,GAAEgB,YAGvC9B,EAAAU,UAAAU,IAAA,SAAIW,GACF7B,KAAKK,YAAYyB,KAAKD,IAGxB/B,EAAAU,UAAAuB,SAAA,SAASC,GACPlC,EAAKQ,iBAAiBwB,KAAKE,GACvBhC,KAAKO,SAASyB,EAAgBnB,QAGpCf,EAAAU,UAAAyB,qBAAA,WACEjC,KAAKK,gBAGPP,EAAAU,UAAAiB,OAAA,WACE9B,gBAAAsB,QAAaiB,OAAOlC,KAAKI,QAASJ,KAAKK,cAGzCP,EAAAU,UAAAE,OAAA,SAAOyB,GAAP,GAAAC,GAAApC,IAAO,UAAAmC,IAAAA,EAAA,EAGL,IAAIE,GAAQ,CACRF,GAAY,GAAKnC,KAAK2B,aAAe,IACvCU,EAAQF,EAAYnC,KAAK2B,cAE3B3B,KAAK2B,aAAeQ,CAGpB,KAAK,GAAIG,GAAItC,KAAKK,YAAYkC,OAAS,EAAGD,GAAK,EAAGA,IAC3CtC,KAAKK,YAAYiC,GAAGnB,OACvBnB,KAAKK,YAAYmC,OAAOF,EAAG,EAK/B,MAAOxC,EAAK2C,OAAOF,OAAS,GAC1B3C,eAAAqB,QAAYyB,YAAY1C,KAAMF,EAAK2C,OAAOE,QAI5C3C,MAAKK,YAAYM,QAAQ,SAAAC,GAAK,MAAAA,GAAEF,OAAO2B,KAGvCrC,KAAKyB,SAGDzB,KAAKO,SACPqC,OAAOC,sBAAsB,SAACC,GAAM,MAAAV,GAAK1B,OAAOoC,MA2B7ChD,EAAAiD,mBAAP,SAA0BC,GAExB,MAAOnD,eAAAoB,QAAWgC,UAAUD,EAAMlD,EAAKQ,mBAzB1BR,EAAAyB,eAAyB,EACzBzB,EAAA0B,gBAA0B,EAElC1B,EAAAoD,KAAO,WAAA,QAAAC,MASd,MAPEC,QAAAC,eAAWF,EAAA,sBAAX,WACE,MAAOrD,GAAK0B,iDAGd4B,OAAAC,eAAWF,EAAA,qBAAX,WACE,MAAOrD,GAAKyB,gDAEhB4B,KAEerD,EAAA2C,UAER3C,EAAAwD,SAAW,WAAA,QAAAC,MAKlB,MAHSA,GAAAC,KAAP,SAAYC,GACV3D,EAAK2C,OAAOX,KAAK2B,IAErBF,KAMFzD,IAnIAsD,QAAAC,eAAAK,QAAA,cAAAC,OAAA","file":"game.js","sourcesContent":["'use strict';\n\nimport FrameRate from './models/frame-rate'\nimport GameObject from './models/game-object';\nimport RenderEngine from './services/render-engine';\nimport InputController from './input-controllers/input-controller';\nimport GameEvent from './events/event';\nimport EventSystem from './services/event-system';\nimport ArrayUtils from './util/array-utils'\n\nexport default class Game {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private frameRateOverlay: FrameRate;\n  private gameObjects: Array<GameObject>;\n  private static inputControllers: Array<InputController>;\n  private running: boolean;\n  private currentFrame: number;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    let twoDContext = canvas.getContext('2d');\n    if (twoDContext == null) {\n      throw new Error('Could not get the context from the canvas');\n    }\n    this.context = twoDContext!;\n    this.gameObjects = [];\n    Game.inputControllers = [];\n    this.running = false;\n  }\n\n  start(): void {\n    this.running = true;\n    this.update();\n\n    Game.inputControllers.forEach(e => e.bind());\n  }\n\n  showFrameRate(isFrameRateVisible: boolean): void {\n    if (isFrameRateVisible) {\n      this.frameRateOverlay = new FrameRate();\n      this.add(this.frameRateOverlay);\n    } else {\n      this.frameRateOverlay.alive = false;\n    }\n  }\n\n  setBounds(width: number, height: number): void {\n    Game._viewPortWidth = width;\n    Game._viewPortHeight = height;\n\n    this.canvas.width = width;\n    this.canvas.height = height;\n\n    this.redraw();\n  }\n\n  stop(): void {\n    this.running = false;\n    this.currentFrame = 0;\n\n    Game.inputControllers.forEach(e => e.unbind());\n  }\n\n  add(gameObject: GameObject): void {\n    this.gameObjects.push(gameObject);\n  }\n\n  addInput(inputController: InputController): void {\n    Game.inputControllers.push(inputController);\n    if (this.running) inputController.bind();\n  } \n\n  removeAllGameObjects(): void {\n    this.gameObjects = [];\n  }\n\n  redraw(): void {\n    RenderEngine.render(this.context, this.gameObjects);\n  }\n\n  update(timestamp: number = 0): void {\n\n    // Time update\n    var delta = 0;\n    if (timestamp > 0 && this.currentFrame > 0) {\n      delta = timestamp - this.currentFrame;\n    }\n    this.currentFrame = timestamp;\n\n    // Remove pass\n    for (var i = this.gameObjects.length - 1; i >= 0; i--) {\n      if (!this.gameObjects[i].alive) {\n        this.gameObjects.splice(i, 1);\n      }\n    } \n\n    // Event pass\n    while (Game.events.length > 0) {\n      EventSystem.handleEvent(this, Game.events.shift());\n    }\n    \n    // Udpate pass\n    this.gameObjects.forEach(e => e.update(delta));\n\n    // Draw pass\n    this.redraw();\n    \n    // Loop\n    if (this.running) {\n      window.requestAnimationFrame((t) => this.update(t));\n    }\n  }\n\n  private static _viewPortWidth: number = 0;\n  private static _viewPortHeight: number = 0;\n\n  static Info = class {\n\n    static get viewPortHeight(): number {\n      return Game._viewPortHeight;\n    }\n\n    static get viewPortWidth(): number {\n      return Game._viewPortWidth;\n    }\n  }\n\n  private static events: Array<GameEvent> = [];\n\n  static EventBus = class {\n\n    static post(event: GameEvent) {\n      Game.events.push(event);\n    }\n  }\n\n  static getInputController(type: any): InputController  | null {\n\n    return ArrayUtils.getByType(type, Game.inputControllers);\n  }\n};\n\n"]}