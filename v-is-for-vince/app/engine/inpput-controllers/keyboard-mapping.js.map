{"version":3,"sources":["engine/inpput-controllers/keyboard-mapping.ts"],"names":["KeyboardMapping","prototype","registerPress","key","action","this","press","registerWhileDown","whileDown","registerOnDown","onDown","registerOnUp","onUp","handlePress","handleEvent","handleWhileDown","handleDown","handleUp","isHandlingUp","Object","keys","length","isHandlingDown","isHandlingWhileDown","isHandlingPress","handler","defineProperty","exports","value"],"mappings":"YAAA,IAAAA,iBAAA,WAAA,QAAAA,MA0DA,MAnDEA,GAAAC,UAAAC,cAAA,SAAcC,EAAaC,GACzBC,KAAKC,MAAMH,GAAOC,GAGpBJ,EAAAC,UAAAM,kBAAA,SAAkBJ,EAAaC,GAC7BC,KAAKG,UAAUL,GAAOC,GAGxBJ,EAAAC,UAAAQ,eAAA,SAAeN,EAAaC,GAC1BC,KAAKK,OAAOP,GAAOC,GAGrBJ,EAAAC,UAAAU,aAAA,SAAaR,EAAaC,GACxBC,KAAKO,KAAKT,GAAOC,GAGnBJ,EAAAC,UAAAY,YAAA,SAAYV,GACVE,KAAKS,YAAYX,EAAKE,KAAKC,QAG7BN,EAAAC,UAAAc,gBAAA,SAAgBZ,GACdE,KAAKS,YAAYX,EAAKE,KAAKG,YAG7BR,EAAAC,UAAAe,WAAA,SAAWb,GACTE,KAAKS,YAAYX,EAAKE,KAAKK,SAG7BV,EAAAC,UAAAgB,SAAA,SAASd,GACPE,KAAKS,YAAYX,EAAKE,KAAKO,OAG7BZ,EAAAC,UAAAiB,aAAA,WACE,MAAOC,QAAOC,KAAKf,KAAKO,MAAMS,OAAS,GAGzCrB,EAAAC,UAAAqB,eAAA,WACE,MAAOH,QAAOC,KAAKf,KAAKK,QAAQW,OAAS,GAG3CrB,EAAAC,UAAAsB,oBAAA,WACE,MAAOJ,QAAOC,KAAKf,KAAKG,WAAWa,OAAS,GAG9CrB,EAAAC,UAAAuB,gBAAA,WACE,MAAOL,QAAOC,KAAKf,KAAKC,OAAOe,OAAS,GAGlCrB,EAAAC,UAAAa,YAAR,SAAoBX,EAAYsB,GACV,MAAhBA,EAAQtB,IAAcsB,EAAQtB,MAEtCH,IA1DAmB,QAAAO,eAAAC,QAAA,cAAAC,OAAA","file":"keyboard-mapping.js","sourcesContent":["export default class KeyboardMapping {\n\n  private press: { [key:string]:Function };\n  private whileDown: { [key:string]:Function };\n  private onDown: { [key:string]:Function };\n  private onUp: { [key:string]:Function };\n\n  registerPress(key: string, action: Function): void {\n    this.press[key] = action;\n  }\n\n  registerWhileDown(key: string, action: Function): void {\n    this.whileDown[key] = action;\n  }\n\n  registerOnDown(key: string, action: Function): void {\n    this.onDown[key] = action;\n  }\n\n  registerOnUp(key: string, action: Function): void {\n    this.onUp[key] = action;\n  }\n\n  handlePress(key: string): void {\n    this.handleEvent(key, this.press);\n  }\n\n  handleWhileDown(key: string): void {\n    this.handleEvent(key, this.whileDown);\n  }\n\n  handleDown(key:string): void {\n    this.handleEvent(key, this.onDown);\n  }\n\n  handleUp(key:string): void {\n    this.handleEvent(key, this.onUp);\n  }\n\n  isHandlingUp(): boolean {\n    return Object.keys(this.onUp).length > 0;\n  }\n\n  isHandlingDown(): boolean {\n    return Object.keys(this.onDown).length > 0;\n  }\n\n  isHandlingWhileDown(): boolean {\n    return Object.keys(this.whileDown).length > 0;\n  }\n\n  isHandlingPress(): boolean {\n    return Object.keys(this.press).length > 0;\n  }\n\n  private handleEvent(key:string, handler: { [key:string]:Function }) {\n    if (handler[key] != null) handler[key]();\n  }\n}"]}